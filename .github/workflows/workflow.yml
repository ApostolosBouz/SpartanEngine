name: build

on: [push, pull_request]

jobs:
  build:
    strategy:
      matrix:
        api: [vulkan, d3d12]
        configuration: [Release, Debug]
    runs-on: "windows-latest"
    env:
      msbuild_path: C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Python dependencies
        run: python -m pip install requests tqdm

      - name: Generate project files
        shell: python
        env:
          API: ${{ matrix.api }}
        run: |
          import subprocess
          import os
          api = os.environ["API"]
          subprocess.run(f"python generate_vs2022_{api}.py")

      - name: Build
        shell: cmd
        run: '"%msbuild_path%\MSBuild.exe" /p:Platform=Windows /p:Configuration=${{ matrix.configuration }} /m spartan.sln'

      - name: Create artifacts
        if: github.event_name != 'pull_request' && matrix.api != 'd3d12'
        shell: cmd
        run: |
          IF "${{ matrix.configuration }}" == "Release" (
            build_scripts\7z.exe a build_${{ matrix.api }}.7z .\binaries\dxcompiler.dll .\binaries\fmod.dll .\binaries\data .\binaries\project .\binaries\spartan_${{ matrix.api }}.exe
            build_scripts\7z.exe a binaries_only_${{ matrix.api }}_release.7z .\binaries\dxcompiler.dll .\binaries\fmod.dll .\binaries\data .\binaries\spartan_${{ matrix.api }}.exe
          ) ELSE (
            build_scripts\7z.exe a build_${{ matrix.api }}_debug.7z .\binaries\dxcompiler.dll .\binaries\fmod.dll .\binaries\data .\binaries\project .\binaries\spartan_${{ matrix.api }}_debug.exe
            build_scripts\7z.exe a binaries_only_${{ matrix.api }}_debug.7z .\binaries\dxcompiler.dll .\binaries\fmod.dll .\binaries\data .\binaries\spartan_${{ matrix.api }}_debug.exe
          )

      - name: Upload full artifact
        if: github.event_name != 'pull_request' && matrix.api != 'd3d12'
        uses: actions/upload-artifact@v4
        with:
          name: build_${{ matrix.api }}${{ matrix.configuration == 'Debug' && '_debug' || '' }}
          path: build_${{ matrix.api }}${{ matrix.configuration == 'Debug' && '_debug' || '' }}.7z

      - name: Upload binaries-only artifact
        if: github.event_name != 'pull_request' && matrix.api != 'd3d12'
        uses: actions/upload-artifact@v4
        with:
          name: binaries_only_${{ matrix.api }}_${{ matrix.configuration == 'Release' && 'release' || 'debug' }}
          path: binaries_only_${{ matrix.api }}_${{ matrix.configuration == 'Release' && 'release' || 'debug' }}.7z

  release:
    if: github.event_name != 'pull_request'
    runs-on: "ubuntu-latest"
    needs: build
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
     
      - name: Download vulkan build (Release)
        uses: actions/download-artifact@v4
        with:
          name: build_vulkan
          path: build_vulkan.7z

      - name: Download vulkan build (Debug)
        uses: actions/download-artifact@v4
        with:
          name: build_vulkan_debug
          path: build_vulkan_debug.7z

      - name: Download vulkan binaries-only release build
        uses: actions/download-artifact@v4
        with:
          name: binaries_only_vulkan_release
          path: binaries_only_vulkan_release.7z

      - name: Download vulkan binaries-only debug build
        uses: actions/download-artifact@v4
        with:
          name: binaries_only_vulkan_debug
          path: binaries_only_vulkan_debug.7z
      
      - name: Publish release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Development Build"
          files: |
            build_vulkan.7z
            build_vulkan_debug.7z
            binaries_only_vulkan_release.7z
            binaries_only_vulkan_debug.7z

      - name: Set environment file for release
        run: echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
